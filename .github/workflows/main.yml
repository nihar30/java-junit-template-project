env:
  STACK: java
  BUILD_TECH: java_ant
  MVN_ARGS: clean install --batch-mode --update-snapshots verify
  CONTINUE_ON_ERROR: false
  CONTINUE_ON_ERROR_SETUP: true
  JOB_STATUS_CODE: 0

on:
  push:
  # and the target with some regex to match specific  branch namess
    branches:
      - master
      - 'FEATURE-[0-9]-[0-9]-[0-9]-X-BRANCH'
      - '[0-9]_[0-9]_x'
      - '[0-9]-[0-9]-X-BRANCH'
  pull_request:
    branches:
      - master
      - 'FEATURE-[0-9]-[0-9]-[0-9]-X-BRANCH'
      - '[0-9]_[0-9]_x'
      - '[0-9]-[0-9]-X-BRANCH'

jobs:
  Build:
    runs-on: ubuntu-latest 
    
    steps:
    ######## Checkout code ########
      - name: 'Checkout repository on branch: ${{ github.REF }}'
        uses: actions/checkout@v2
        continue-on-error: ${{ env.CONTINUE_ON_ERROR }}
        with:
          ref: ${{ github.REF }}
          fetch-depth: 0
          
      ######## Setup JDK 11 ########
      - name: set up JDK 11
        id: setup_jdk
        if: ${{ env.STACK == 'java' }}
        uses: actions/setup-java@v2
        continue-on-error: ${{ env.CONTINUE_ON_ERROR }}
        with:
          java-version: '11'
          distribution: 'adopt'
       
#       - run: |
#             sudo apt install curl
#             curl â€“O https://binaries.sonarsource.com/Distribution/sonarqube-ant-task/sonarqube-ant-task-2.7.1.1951.jar
       
      ######## Build - ANT ########       
      - name: Build with Ant
        if: ${{ env.BUILD_TECH == 'java_ant'  }}
        run: ant -noinput -buildfile build.xml
      - run: ls -R
      - name: Install Wget
        run: sudo apt install wget
      - name: Download jar
        run: wget 'https://binaries.sonarsource.com/Distribution/sonarqube-ant-task/sonarqube-ant-task-2.7.1.1951.jar' -O '/home/runner/work/java-junit-template-project/java-junit-template-project/lib/sonarqube-ant-task-2.7.1.1951.jar'

#       - name: Sonar
#         run: ant sonar -Dsonar.login=d33153c2a482d748cd4db79151f9677dd37f62b0
        
          ######## Build - Ant ########
#       - name: Build with Ant
#         if: ${{ env.BUILD_TECH == 'java_ant' && (env.RUNTASK == 'BuildOnly' || env.RUNTASK == 'CIOnly' || env.RUNTASK == 'CICD' || env.RUNTASK == 'Full') }}
#         run: ant -noinput -buildfile build.xml
        
      ######## Build - Maven ########
#       - name: Build with Maven
#         id: build_maven
#         if: ${{ env.BUILD_TECH == 'java_maven' }}
#         run: mvn ${{ env.MVN_ARGS }}
#         continue-on-error: ${{ env.CONTINUE_ON_ERROR }}


      ######## JUnit Test with ANT ########
#       - name: Test with Maven
#         run: mvn -B test --file pom.xml

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ./TEST-helloWorld.HelloWorldTest.xml  
          
      - name: 'Publish Test results'
        uses: actions/upload-artifact@v2.2.3
        with:
            name: Test Report
            path: ./*.xml
 

#       - name: Generate JaCoCo Badge
#         uses: cicirello/jacoco-badge-generator@v2
#         with:          
#           jacoco-csv-file: target/site/jacoco/jacoco.csv
#           badges-directory: .github/JaCoCo
#           generate-coverage-badge: true
#           coverage-badge-filename: jacoco.svg
#           generate-branches-badge: false
#           branches-badge-filename: branches.svg
#           colors: '#4c1 #97ca00 #a4a61d #dfb317 #fe7d37 #e05d44'
#           intervals: 100 90 80 70 60 0
#           on-missing-report: fail
#           fail-if-coverage-less-than: 0
#           fail-if-branches-less-than: 0
#           fail-on-coverage-decrease: false
#           fail-on-branches-decrease: false
#       - name: Log coverage percentage
#         run: |
#           echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
#           echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"     
#       - name: Upload JaCoCo coverage report
#         uses: actions/upload-artifact@v2
#         with:
#           name: jacoco-report
#           path: target/site/jacoco/
 
#       - name: SonarQube Scan
#         run: mvn -B sonar:sonar -Dsonar.host.url=http://18.223.255.187:9000/ -Dsonar.login=860a420eb9a5bf5a4f90668f83809ca977fddd88
#       - uses: sonarsource/sonarqube-scan-action@master
#         env:
#           SONAR_TOKEN: ${{ secrets.JavaMavenApp }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      
        
#   Deploy-Dev:
#     environment: 'Development'
#     runs-on: ubuntu-latest
#     needs: Build
#     steps:
#     - name: Deploy dev
#       run: echo ${{ job.status }}
      
#   Functional-Test-Regression:
#     runs-on: ubuntu-latest
#     needs: Deploy-Dev
#     steps:
#     - name: Regression
#       run: echo ${{ job.status }}
      
#   Functional-Test-Progression:
#     runs-on: ubuntu-latest
#     needs: Deploy-Dev
#     steps:
#     - name: Progression
#       run: echo ${{ job.status }}
      
#   Performance-Test:
#     runs-on: ubuntu-latest
#     needs: Deploy-Dev
#     steps:
#     - name: Peerformance-Test
#       run: echo ${{ job.status }}
    
#   Stage-Artifacts:
#     runs-on: ubuntu-latest
#     needs: [Functional-Test-Progression, Functional-Test-Regression]
#     steps:
#     - name: Upload Artifacts to Artifactory
#       run: echo ${{ job.status }}
